{"version":3,"sources":["ContactForm.js","DesktopNav.js","MobileNav.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","input","useEffect","document","getElementById","setAttribute","emailString","style","Col","xs","Form","id","method","FormGroup","Label","for","sm","Input","type","name","required","value","Button","DesktopNav","Navbar","fixed","NavbarBrand","color","MobileNav","App","width","window","innerWidth","useState","navbar","setNavbar","className","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAUe,SAASA,IACpB,IACMC,EAAQ,CAAC,OAAU,MAAO,eAAgB,WAOhD,OALAC,oBAAU,WACcC,SAASC,eAAe,eAEhCC,aAAa,SAAU,CAACC,YADhB,kDAIpB,yBAAKC,MATa,CAAC,QAAW,OAAQ,kBAAmB,WAUrD,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,GAAG,cAAcC,OAAO,QAC1B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,OAAOC,GAAI,GAAtB,QACA,kBAACC,EAAA,EAAD,CAAOV,MAAON,EAAOiB,KAAK,OAAOC,KAAK,OAAOR,GAAG,OAAOS,UAAQ,KAEnE,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAQC,GAAI,GAAvB,SACA,kBAACC,EAAA,EAAD,CAAOV,MAAON,EAAOiB,KAAK,MAAMC,KAAK,QAAQR,GAAG,QAAQS,UAAQ,KAEpE,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,QAAQC,GAAI,GAAvB,SACA,kBAACC,EAAA,EAAD,CAAOV,MAAON,EAAOiB,KAAK,QAAQC,KAAK,QAAQR,GAAG,QAAQS,UAAQ,KAEtE,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,UAAUC,GAAI,GAAzB,WACA,kBAACC,EAAA,EAAD,CAAOV,MAAO,CAAC,OAAU,OAAQ,eAAgB,WAAYW,KAAK,WAAWC,KAAK,UAAUR,GAAG,UAAUS,UAAQ,KAErH,kBAACH,EAAA,EAAD,CAAOC,KAAK,SAASC,KAAK,WAAWE,MAAM,oCAC3C,kBAACJ,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,UAAUZ,MAAO,CAAC,QAAW,UACrD,kBAACe,EAAA,EAAD,CAAQJ,KAAK,SAASG,MAAM,OAAOd,MA7BrC,CAAC,gBAAmB,UAAW,MAAS,UAAW,OAAU,MAAO,MAAS,OAAQ,SAAY,SA6B/F,UAGR,kBAACC,EAAA,EAAD,CAAKC,GAAI,K,0BCtCN,SAASc,IAEpB,OACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMlB,MAAO,CAAC,OAAU,OAAQ,gBAAmB,UAAW,MAAS,YACjF,kBAACmB,EAAA,EAAD,CAAanB,MAHH,CAAC,SAAY,OAAQ,WAAc,OAAQ,WAAc,UAAW,WAAc,OAG5F,oCACA,kBAACe,EAAA,EAAD,CAAQK,MAAM,QAAd,cACA,kBAACL,EAAA,EAAD,CAAQK,MAAM,QAAd,YACA,kBAACL,EAAA,EAAD,CAAQK,MAAM,QAAd,YCTG,SAASC,IACpB,OACI,kBAACN,EAAA,EAAD,gCCcOO,MAhBf,WACE,IAAIC,EAAQC,OAAOC,WADN,EAEeC,mBAASH,GAAS,IAAM,kBAACP,EAAD,MAAiB,kBAACK,EAAD,OAFxD,mBAENM,EAFM,KAEEC,EAFF,KAOb,OAHAjC,oBAAU,WACRiC,EAAUL,GAAS,IAAM,kBAACF,EAAD,MAAgB,kBAACL,EAAD,SAGzC,yBAAKa,UAAU,OACZF,EACD,yBAAK3B,MAPI,CAAC,OAAU,UAQpB,kBAACP,EAAD,QCJcqC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASC,eAAe,SD4H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9957a9fe.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Col,\r\n  Button\r\n} from 'reactstrap'\r\n\r\nexport default function ContactForm() {\r\n    const flexContainer = {'display': 'flex', 'justify-content': 'center'}\r\n    const input = {'height': '8vh', 'border-color': '#2c3e50'}\r\n    const submit= {'backgroundColor': '#f0ff00', 'color': '#2c3e50', 'height': '20%', 'width': '20vw', 'fontSize': '100%'}\r\n    useEffect(() => {\r\n        const contactform = document.getElementById('contactform');\r\n        const emailString = '//formspree.io/' + 'suzanne' + '@' + 'medicareandmore' + '.' + 'info';\r\n        contactform.setAttribute('action', {emailString});\r\n    })\r\n    return (\r\n        <div style={flexContainer}>\r\n            <Col xs={3} />\r\n            <Col xs={6}>\r\n                <Form id='contactform' method=\"POST\">\r\n                    <FormGroup>\r\n                        <Label for='name' sm={1}>Name</Label>\r\n                        <Input style={input} type='text' name='name' id='name' required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for='phone' sm={1}>Phone</Label>\r\n                        <Input style={input} type='tel' name='phone' id='phone' required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for='email' sm={1}>Email</Label>\r\n                        <Input style={input} type='email' name='email' id='email' required />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for='message' sm={1}>Message</Label>\r\n                        <Input style={{'height': '24vh', 'border-color': '#2c3e50'}} type='textarea' name='message' id='message' required />\r\n                    </FormGroup>\r\n                    <Input type=\"hidden\" name=\"_subject\" value=\"New Message for Medicare & More\" />\r\n                    <Input type=\"text\" name=\"_gotcha\" style={{'display': 'none'}} />\r\n                    <Button type='submit' value='Send' style={submit}>Send</Button>\r\n                </Form>\r\n            </Col>\r\n            <Col xs={3} />\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand, \r\n  Button } from 'reactstrap';\r\n  \r\nexport default function DesktopNav() {\r\n    const titleStyles={'fontSize': '35px', 'fontFamily': 'Lato', 'fontWeight': 'lighter', 'marginLeft': '5%'}\r\n    return (\r\n        <Navbar fixed='top' style={{'height': '20vh', 'backgroundColor': '#ecf0f1', 'color': '#2980b9'}}>\r\n            <NavbarBrand style={titleStyles}>Medicare & More Insurance Agency</NavbarBrand>\r\n            <Button color='link'>Home/About</Button>\r\n            <Button color='link'>Services</Button>\r\n            <Button color='link'>Contact</Button>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button } from 'reactstrap';\r\n\r\nexport default function MobileNav() {\r\n    return (\r\n        <Button>This is a mobile device</Button>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\nimport ContactForm from './ContactForm'\nimport DesktopNav from './DesktopNav';\nimport MobileNav from './MobileNav';\n\nfunction App() {\n  let width = window.innerWidth;\n  const [navbar, setNavbar] = useState(width >= 768 ? <DesktopNav /> : <MobileNav />)\n  const spacer={'height': '30vh'}\n  useEffect(() => {\n    setNavbar(width <= 975 ? <MobileNav /> : <DesktopNav />)\n  })\n  return (\n    <div className=\"App\">\n      {navbar}\n      <div style={spacer} />\n      <ContactForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
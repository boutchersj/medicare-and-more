{"version":3,"sources":["DesktopNav.js","MobileNav.js","LandingPage.js","Services.js","GoogleMap.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["DesktopNav","props","Navbar","style","NavbarBrand","Button","onClick","changePage","id","color","MobileNav","Card","onTouchStart","LandingPage","navbar","Services","Map","MyMapComponent","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","position","loadingElement","height","containerElement","mapElement","googleMapURL","Contact","flexContainer","input","Col","xs","Form","action","method","FormGroup","Label","for","sm","Input","type","name","required","value","App","state","home","services","contact","bind","event","target","console","log","pages","splice","indexOf","other1","other2","this","setState","window","innerWidth","React","Component","Boolean","location","hostname","match","ReactDOM","render","mobile","desktop","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d57394a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Navbar,\r\n  NavbarBrand, \r\n  Button } from 'reactstrap';\r\n  \r\nexport default function DesktopNav(props) {\r\n    const titleStyles={'fontSize': '35px', 'fontFamily': 'Lato', 'fontWeight': 'lighter', 'marginLeft': '5%'}\r\n    const navbarStyles={'height': '20vh', 'backgroundColor': '#ecf0f1', 'color': '#2980b9'}\r\n\r\n    return (\r\n        <Navbar style={navbarStyles}>\r\n            <NavbarBrand style={titleStyles}>Medicare & More Insurance Agency</NavbarBrand>\r\n            <Button onClick={props.changePage} id='home' color='link'>Home/About</Button>\r\n            <Button onClick={props.changePage} id='services' color='link'>Services</Button>\r\n            <Button onClick={props.changePage} id='contact' color='link'>Contact</Button>\r\n        </Navbar>\r\n    )\r\n}","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Card\r\n   } from 'reactstrap';\r\n\r\nexport default function MobileNav(props) {\r\n  const flexStack = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'center', 'width': '100%'}\r\n  const titleStyles={'fontSize': '35px', 'fontFamily': 'Lato', 'fontWeight': 'lighter', 'textAlign': 'center'}\r\n  const navbarStyles={'height': '20vh', 'backgroundColor': '#ecf0f1', 'color': '#2980b9', 'display': 'flex', 'justifyContent': 'center', 'align-items': 'center'}\r\n\r\n  return (\r\n    <div>\r\n      <div style={flexStack}>\r\n        <div style={navbarStyles}>\r\n          <h1 style={titleStyles}>Medicare & More Insurance Agency</h1>\r\n        </div>\r\n        <Card>\r\n          <Button onTouchStart={props.changePage} id='home' color='link'>Home/About</Button>\r\n          <Button onTouchStart={props.changePage} id='services' color='link'>Services</Button>\r\n          <Button onTouchStart={props.changePage} id='contact' color='link'>Contact</Button>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport default function LandingPage(props) {\r\n    const flexContainer = {'display': 'flex', 'justifyContent': 'center'}\r\n    return(\r\n        <div>\r\n            {props.navbar}\r\n            <h1 style={flexContainer}>\r\n                Landing Page\r\n            </h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Services(props) {\r\n    const flexContainer = {'display': 'flex', 'justifyContent': 'center'}\r\n    return (\r\n        <div id='services'>\r\n            {props.navbar}\r\n            <h1 style={flexContainer} >Services</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from 'react-google-maps'\r\n\r\nexport default function Map() {\r\n\r\n    const MyMapComponent = withScriptjs(withGoogleMap(props => {\r\n        return (\r\n        <GoogleMap\r\n            defaultZoom={19}\r\n            defaultCenter={{ lat: 42.679679, lng: -88.269930 }}\r\n        >\r\n            <Marker\r\n                position = {{ lat: 42.679679, lng: -88.269930 }}\r\n            />\r\n        </GoogleMap>\r\n        )\r\n    }))\r\n    return (\r\n        <MyMapComponent\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n            containerElement={<div style={{ height: `400px` }} />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyB9rSDc3XLK-fU0qbjpgbtHywxkVHFaW0Q&v=3.exp&libraries=geometry,drawing,places\"\r\n        />\r\n    )\r\n}","import React from 'react'\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Col,\r\n  Button\r\n} from 'reactstrap'\r\nimport Map from './GoogleMap'\r\n\r\nexport default function Contact(props) {\r\n    const flexContainer = {'display': 'flex', 'justifyContent': 'center'}\r\n    const input = {'height': '8vh', 'borderColor': '#2c3e50'}\r\n    const submit= {'backgroundColor': '#2ecc71', 'color': 'white', 'height': '20%', 'width': '20vw', 'fontSize': '100%', 'margin': '1%'}\r\n    return (\r\n        <div id='contact'>\r\n            {props.navbar}\r\n            <h1 style={flexContainer}>Contact Me</h1>\r\n            <div style={flexContainer}>\r\n                <Col xs={3} />\r\n                <Col xs={6}>\r\n                    <Form id='contactform' action='https://formspree.io/suzanne@medicareandmore.info' method=\"POST\">\r\n                        <FormGroup>\r\n                            <Label for='name' sm={1}>Name</Label>\r\n                            <Input style={input} type='text' name='name' id='name' required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for='phone' sm={1}>Phone</Label>\r\n                            <Input style={input} type='tel' name='phone' id='phone' required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for='email' sm={1}>Email</Label>\r\n                            <Input style={input} type='email' name='email' id='email' required />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for='message' sm={1}>Message</Label>\r\n                            <Input style={{'height': '24vh', 'borderColor': '#2c3e50'}} type='textarea' name='message' id='message' required />\r\n                        </FormGroup>\r\n                        <Input type=\"hidden\" name=\"_subject\" value=\"New Message for Medicare & More\" />\r\n                        <Input type=\"text\" name=\"_gotcha\" style={{'display': 'none'}} />\r\n                        <Button type='submit' value='Send' style={submit}>Send</Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col xs={3} />\r\n            </div>\r\n\r\n            <Map />\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport DesktopNav from './DesktopNav'\nimport MobileNav from './MobileNav'\nimport LandingPage from './LandingPage'\nimport Services from './Services'\nimport Contact from './Contact'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      home: true,\n      services: false,\n      contact: false\n    }\n    this.changePage = this.changePage.bind(this)\n  }\n\n  changePage(event) {\n    const { id } = event.target;\n    console.log(id)\n    let pages = ['home', 'services', 'contact'];\n    pages.splice(pages.indexOf(id), 1);\n    const other1 = pages[0];\n    const other2 = pages[1];\n    this.setState({\n      [id]: true,\n      [other1]: false,\n      [other2]: false\n    });\n  }\n\n  render(){\n    const navbar = window.innerWidth <= 975 \n      ? <MobileNav changePage={this.changePage} />\n      : <DesktopNav changePage={this.changePage} />\n\n    return this.state.home === true \n        ? (<LandingPage navbar={navbar} />)\n        : this.state.services === true \n        ? (<Services navbar={navbar} />)\n        : this.state.contact === true\n        ? (<Contact navbar={navbar} />)\n        : (<LandingPage navbar={navbar} />)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MobileNav from './MobileNav'\nimport DesktopNav from './DesktopNav'\n\nReactDOM.render(<App style={{ 'fontFamily': 'Lato' }} mobile={<MobileNav />} desktop={<DesktopNav />} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}